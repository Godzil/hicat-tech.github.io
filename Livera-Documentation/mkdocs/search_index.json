{
    "docs": [
        {
            "location": "/", 
            "text": "Quick Start/User Manual\n\n\nWhat is Livera\n\n\n\n\nWelcome to start the new adventure with Hicat!! Happy hacks. :p\n\n\nIn a nutshell, Livera by Team HiCat is an open source hardware project which aims to bring machine vision features to the \nArduino\n community. It is also a good platform for building \nvisual driven robotics.\n\n\nWe've provided libraries which contain \nmachine vision\n related APIs such as:\n\n\n\n\n720hd video and photo capturing\nprocessing\n\n\nOpenCV enabled Color-Sensitive and Object-Tracking.\n\n\nWifi enabled wireless control (this can work with the iot!) \n\n\nImage capturing and data recording onto the onboard sd card \n\n\nMobile observation and manipulation from our custom apps( web-based and native)\n\n\nProgrammable and open source.\n\n\n\n\nwhat Livera could do:\n\n\n\n\nFuture development:\n\n\nIt is always exciting to think about the future, as for the buzz of AI recently, undeniably it is the future.\n\n\nWhen we saw the article of How a \nJapanese cucumber farmer is using deep learning to sort cucumbers.\n we think Livera should be best machine vision front-end part for \nimage capturing and openCV pre-processing\n.\n\n\nWith the natural language virtual assistant and cloud deep learning platfrom, we could just teach the robot how to perform task by speaking, or let him learn by watching, that will be really awesome, like people could finally owns their own real world \nR2D2\n or \nBB8\n.\n\n\nIn conclusion:\n\n\n\n\nTheme based advance \nrobotic kit\n.\n\n\nMore advance image capturing and processing capability\n\n\nNatural language virtual assitant\n\n\nImage streaming and processing \ncloud\n \n\n\n\n\nUser Manual\n\n\n\n\nPower:\n LIVERA allows mulitpul ways of power supply\n\n\n\n\n3.7V lipo battery (No higher voltage)\n\n\nUSB cable (2.0)\n\n\nI/O port\n\n\n\n\nHock Up Camera Module:\n The Livera core package contains 3 main conponent, 1. Livera Board 2. Camera Module 3. Extendable Cable.\n\n\nYou could choose to directly plug in the Camera Module on to Livera Board, or use extendable cable to extend the Camera Module in order to build Robot.\n\n\nConnect to Livera:\n Power up Livera, give a few second to boot, the WIFI access point hostname \nhicat_xxxxxx\n should show up on your PC/MOBILE's wifi list. The default wifi password is: \n88888888\n\n\nOnce you connected to LIVERA, you could Telnet()\n\n\nTest Video Feature:\n LIVERA has two video streaming mode \nRTSP/MJPEG\n, RTSP stands for advence \nH.264 raw video streaming\n which works well with our Android app or any video Player which accepted RTSP streaming protocol. MJPEG would be a \nWEB friendly\n video format.\n\n\nOnce you successfully boot up Livera and accessing into the WIFI, you can connect to the web app we built to test the board function.\n\n\nGo to web page \n192.168.1.1/www/mmc/webapp/index.html\n or the simplify version web page \n192.168.1.1\n. \n\n\nOnce the web page show up, hit the \nLiveView\n button to get video stream from Livera. \n\n\nAccess into Linux(3518E):\n Livera accept \ntelnet\n connections, when you connected to Livera with WIFI, you could open up your terminal, type:\n\n\ntelnet 192.168.1.1       //if you let the board connected to the router you should find the correct IP address\n\n//User:root\n//passward:(hit return directly)\n\ncd /hicat/   //firmware directory\n./launch.sh   //Main script for main operation: video setting/mount sd card\n\ncd /hicat/www/mmc  //SD card directory\n\n\n\n\nHardware\n\n\nLivera\n\n\nMotor Driver\n\n\nThe Robot kit Assembly Guide\n\n\nSoftware\n\n\nFirmware\n\n\nHow to burn the firmware to flash\n\n\nyou must have a hicat board with a uboot already burned.\n\n\nthen connect the UART0 on the ARM9 Hisiv chip. and then use the command as below[recomendly using Hyper Terminal to finish this]:\n\n\nloady 0x82000000\n\n\n\n\nthen send file on Hyper Terminal with xmodern protocal. choose the uImage file under https://github.com/9crk/libhisiv/opt/\n\n\nsf probe 0\nsf erase 0x100000 0x300000\nsf write 0x82000000 0x100000 0x300000    \nloady 0x82000000\n\n\n\n\nthen send the rootfs file to the board.\n\n\nsf erase 0x400000 0xC00000\nsf write 0x82000000 0x400000 0x500000\nsetenv bootargs 'mem=32M console=ttyAMA0,115200 root=/dev/mtdblock2 rootfstype=jffs2 mtdparts=hi_sfc:1M(boot),3M(kernel),12M(rootfs)'\nsetenv bootcmd 'sf probe 0;sf read 0x82000000 0x100000 0x300000;bootm 0x82000000'\nsaveenv\n\n\n\n\nthen reboot the board or execute 'reset' command.\n\n\nHow to use opencv Demo\n\n1. clone this repo\n2. then install the compiler\n3. compile the apps under 'app' dir with \n./build.sh\n\n4. copy the app dir to the board\n5. copy the opt/opencvlib dir to the board at /www/mmc/opencv/opencvlib\n6. \ncd app \n source env.sh\n\n7. \nexecute './capture'\n to capture an image named 'myImage.jpg'\n8. \nexecute './match model.jpg'\n to find the object model.jpg in the camera.\n9. then you can browser the result hi.jpg on http://192.168.1.1/mmc/opencv/app/hi.jpg\n\n\nAbout rtspserver and libhisiv.a\n\n\nrtspserver have two demo:\n\n one is modified from live555 project. ( live555MediaServer )\n * source code is in https://bitbucket.org/zhouhua/hicat_rtspserver\n * play Address: rtsp://192.168.1.1/hicat.264\n\n one is a http-rtp based program. with only binary file provided. ( http-rtpServer )\n * play Address: http://192.168.1.1/cgi-bin/video.sdp but must with zwebs running first.\n\n\nyou can rename any of it as 'rtspserver',then it will be run in the next boot. or run /hicat/launch.sh restart to restart all services.\nlibhisiv.a contains all the camera function.as below:\n\n\nextern int venc_exit(int n);//0 \nextern int venc_init(int resolve);//0:720P 1:QVGA 2:VGA\nextern int venc_requestIDR();\nextern int venc_getFrame(char* buffer,int *datalen);//get h264 frame data.\nextern int venc_rotate(int dir);//0:no rotate 2:180 digree rotate.\nextern int venc_getYUV(int mode,char*buff);//get YUV data.\n\n\n\n\nHow to install software pack\n\n\n\n\nexecute 'lrz' command to send libhicat/opt/hi_sd.sh into the board (any where)\n\n\nformat the sd card with fat32 format in default param. or use mkfs.vfat on Linux OS\n\n\nthen execute \nchmod +x hi_sd.sh \n ./hi_sd.sh\n, the board will reboot\n\n\n\n\nHow to upgrade\n\n1. Formating the SD card with vfat or fat32 mode.\n2. then copy the hicat2016xxxx.tar package to the SD card.\n3. press the reset button (RST_PBC)\n4. connect the power supply.\n5. wait for the board reset again.\n\n\nWhat's more\n\n \nzwebs\n https://9crk@bitbucket.org/zhouhua/hicat_zwebs.git\n\n\nHow to use programming with serial port on Hisiv\n\n \nlibSerial\n https://github.com/9crk/libSerial.git\n\n\nSource Code\n can be view \nhere\n\n\nAndroid\n\n\nWeb app\n\n\n\n\nThe web app provides functions like Video recording, Live streaming, \n\n\nWhat an amazing feature about livera is it could \nserve web pages\n as web app thanks to the file streaming server, in Livera's demo, we've provided a single page web app which based on VUE.js, the app would work as Livera's command panel.\n\n\nThe server also provide \nREST API\n which allows you to communicate with Livera through AJAX\n\n\n\n\n\nExample Code\n\n\nImage Capturing\n\n\n1. Image capture within Arduino\n\n\n\n    #include \"hicat.h\"\n\n    void setup()\n    {\n        hicat.begin();\n\n        char name[16] = \"0.jpg\";\n        for (int i = 0; i \n<\n 8; i++)\n        {\n            name[0] = '0' + i;\n            hicat.snapshot(name);\n\n            delay(10);\n        }\n    }\n\n    void loop()\n    {\n    }\n\n\n\n\nRobot Kit\n\n\n\n\n    // hicat robot demo\n    // get SerialCommand library from https://github.com/hicat-tech/Arduino-SerialCommand\n\n    #include \n\n    #include \n\n\n    int PWM1 = 9;     // control servo\n    int PWM_CE = 11;  // servo enable\n\n    int AIN1 = 4;  // control motor1\n    int AIN2 = 5;  // control motor1\n    int AIN3 = 6;  // control motor2\n    int AIN4 = 7;  // control motor2\n\n    int BIN3 = A2;  //control laser\n    int BIN4 = A3;  //control laser\n\n    Servo myservo;\n    SerialCommand sCmd;\n\n    uint8_t camera_angle = 120;\n    uint8_t camera_angle_range[] = {\n      60, 150\n    };\n    uint8_t laser_is_on = 0;\n\n    void setup() {\n      Serial.begin(115200);\n      Serial1.begin(115200);\n\n    //  while (!Serial);\n      Serial.println(\"----- Car ----\");\n\n      // initialize the digital pin as an output.\n      pinMode(AIN1, OUTPUT);\n      pinMode(AIN2, OUTPUT);\n      pinMode(AIN3, OUTPUT);\n      pinMode(AIN4, OUTPUT);\n      pinMode(BIN3, OUTPUT);\n      pinMode(BIN4, OUTPUT);\n      digitalWrite(BIN3, LOW);  // turn off LASER\n      digitalWrite(BIN4, LOW);\n\n      pinMode(PWM_CE, OUTPUT);\n      myservo.attach(PWM1);\n      digitalWrite(PWM_CE, HIGH);\n      myservo.write(camera_angle);\n      digitalWrite(PWM_CE, LOW); //disable servo\n\n\n      // Setup callbacks for SerialCommand commands\n      sCmd.addCommand(\"laser\", trigger_laser);\n      sCmd.addCommand(\"camera\", adjust_camera);\n      sCmd.addCommand(\"motor\", set_motor);\n      sCmd.setDefaultHandler(unrecognized);\n    }\n\n    // the loop routine runs over and over again forever:\n    void loop() {\n      sCmd.readSerial((Stream\n&\n)Serial1);\n    }\n\n    void trigger_laser()\n    {\n      if (laser_is_on) {\n        digitalWrite(BIN3, LOW);  // turn off LASER\n        laser_is_on = 0;\n        Serial.println(\"laser off\");\n      }\n      else {\n        digitalWrite(BIN3, HIGH);  // turn on LASER\n        laser_is_on = 1;\n        Serial.println(\"laser on\");\n      }\n    }\n\n    void adjust_camera()\n    {\n      char *param;\n\n      param = sCmd.next();\n      if (!strcmp(param, \"down\")) {\n        if (camera_angle \n<\n camera_angle_range[1]) {\n          camera_angle += 10;\n\n          digitalWrite(PWM_CE, HIGH);\n          myservo.write(camera_angle);\n          digitalWrite(PWM_CE, HIGH);\n        }\n      }\n      else if (!strcmp(param, \"up\")) {\n        if (camera_angle > camera_angle_range[0]) {\n          camera_angle -= 10;\n\n          digitalWrite(PWM_CE, HIGH);\n          myservo.write(camera_angle);\n          digitalWrite(PWM_CE, HIGH);\n        }\n      }\n\n      Serial.print(\"camera angle: \");\n      Serial.println(camera_angle);\n    }\n\n    void set_motor()\n    {\n      char *param;\n      int16_t left = 0;\n      int16_t right = 0;\n\n      param = sCmd.next();\n      if (param == NULL) {\n        return;\n      }\n      left = atoi(param);\n\n      param = sCmd.next();\n      if (param == NULL) {\n        return;\n      }\n      right = atoi(param);\n\n      Serial.print(\"motor \");\n      Serial.print(left);\n      Serial.print(\" \");\n      Serial.println(right);\n\n\n      if (left > 30) {\n        analogWrite(AIN2, left);\n        digitalWrite(AIN1, LOW);\n      } else if (left \n<\n -30)  {\n        analogWrite(AIN2, 255 + left);\n        digitalWrite(AIN1, HIGH);\n      }\n      else {\n        digitalWrite(AIN1, LOW);\n        digitalWrite(AIN2, LOW);\n      }\n\n      if (right > 30) {\n        analogWrite(AIN3, right);\n        digitalWrite(AIN4, LOW);\n      }\n      else if (right \n<\n -30) {\n        analogWrite(AIN3, 255 + right);\n        digitalWrite(AIN4, HIGH);\n      }\n      else {\n        digitalWrite(AIN3, LOW);\n        digitalWrite(AIN4, LOW);\n      }\n\n    }\n\n\n    // This gets set as the default handler, and gets called when no other command matches.\n    void unrecognized(const char *command) {\n      Serial.println('?');\n    }\n\n\n\n\n\n\nAdvance\n\n\nAPI GUIDE\n\n\n1.WEB API\n\n\nThe Web API contains a set of REST API in order to interact with LIVERA in a convenient way through \nAJAX\n or \nURL\n. \n\n\nAJAX Example:\n\n\n\n\n    var xhr = new XMLHttpRequest(){\n          xhr.open('GET', '/hicat/videoServer?mode=0', true)\n          xhr.onload = function() {\n            answer = JSON.parse(xhr.responseText)\n            console.log(answer1)            }\n         }\n        xhr.send()\n    }\n\n\n\n\n\n1.\nSet up Video Streaming Mode:\n This API allows you to swith between \nRTSP\n and \nMJPEG\n streaming mode, be careful that \nVideo Record API\n only works under \nRTSP Mode\n, and \nScreen Shot API\n only works under \nMJEPG Mode\n.\n\n\n/hicat/videoServer?mode=0\n\n\n\n\nmode=0\n: RTSP Server Start\n\nmode=1\n: MJPEG Mode\n\n\n2.\nStation Mode\n: Let Livera link to local wifi router\n\n\n/hicat/stationMode?ssid=xxxxx\npassword=xxxxxxx\n\n\n\n\nreturn messages:\n\nsuccess\n: none return\n\nerror\n:{\"result\":\"ERROR\"}\n\n\n3.\nWIFI Access Point\n: Make Livera to AP mode\n\n\n/hicat/apMode?ssid=xxxxx\npassword=xxxxxxx\n\n\n\n\nreturn messages(object):\n\nsuccess\n: none return\n\nerror\n\uff1a{\"result\":\"ERROR\"}\n\n\n4.\nSet Livera time\n: Synchronous time with Livera, the time also affect to the default video name. \n\n\n/hicat/setTime?time=%d-%d-%d-%d-%d-%d\n\n\n\n\nExample\n: /hicat/setTime?time=2018-09-09-01-01-01\n\nsuccess\n\uff1a{\"result\":\"OK\"}  \n\n\nerror\n\uff1a{\"result\":\"ERROR\"}\n\n\n5.\nGet Video Download Links\n: This API will return a JASON format(\n{\"result\":\"OK\",\"files\":[\"name\":\"xxxxx\",\"name\":\"xxxxx\"]}\n) message about all the file within \nvideo folder\n in SD Card. Once you get the fileName you could just go to this url \nhttp://192.168.1.1/mmc/video/xxxxx.264\n to download it(might figure your IP address under station mode).\n\n\n/hicat/files\n\n\n\n\nsuccess\n:{\"result\":\"OK\",\"files\":[\"name\":\"xxxxx\",\"name\":\"xxxxx\"]}  \n\n\nerror\n:{\"result\":\"ERROR\"}\n\n\n6.\nVideo Record\n: This API allows you to record and delete the video and auto save into the default \nvideo\n folder in SD card.\n\n\n/hicat/record?save=1\n/hicat/record?del=xxxxxxxx.h264\n\n\n\n\nsave=1\n: start recording\n\nsave=0\n: stop recording and save\n\ndel=xxxxxxxx.h264\n: delete xxxxxxxx.h264\n\nsuccess\n\uff1a{\"result\":\"OK\"}  \n\n\nerror\n\uff1a{\"result\":\"ERROR\"}\n\n\n7.\nVideo Setting\n: Switch video angle, video resolution and video fps.\n\n\n/hicat/setCamera?resolve=1\nrotate=0\nfps=20\n\n\n\n\nsuccess\n\uff1a{\"result\":\"OK\"}  \n\n\nerror\n\uff1a{\"result\":\"ERROR\"}\n\n\n//only work under mjpg mode\n\n\n8.\nSnapshot\n: snap shot form one of the frame form MJPEG stream. We suggest to make the direction to /www/mmc/video/ coz the photo info could be receive under \n/hicat/files\n API.\n\n\n/hicat/snapshot?name=xxx.jpg\ndir=/www/mmc/video/\n\n\n\n\nsuccess\n\uff1a{\"result\":\"OK\"}    \n\n\n9.\nFor test\n: test api, do nothing but test.\n\n\n/hicat/test\n\n\n\n\nsuccess\n\uff1a{\"result\":\"OK\"}   \n\n\n2.Embedded Linux API\n\n\nDetail information could be view under our github \nlibhicat\n, There are instructions guide you through development tools set up and workflow, please have a look.\n\n\n#ifndef _LIBHISIV_H_\n#define _LIBHISIV_H_\n\n#ifdef __cplusplus \nextern \nC\n { \n#endif\nint venc_exit(int n);\nint venc_init(int resolve);//0:720P 1:QVGA(320*240) 2:VGA(640*480)\nint venc_init_more(int resolve,int mode,int fps);//resolve: 0/1/2  1280*720/320*240/640*480  mode: 0/1 H264/MJPEG\nint venc_requestIDR();//request IDR frame\nint venc_getFrame(char* buffer,int *datalen,int *pts,int *type);\nint venc_snap(char* buff,int xRes,int yRes);\nint venc_getYUV(int mode,char*buff);//mode=0 Y  mode=1 UV mode = 3 YUV420(SP)\nint venc_rotate(int dir);\n\n//for audio\nextern int aenc_init(int mode);// 0/1 PT_LPCM/AAC/\nextern int aenc_getFrame(char* buff);\nextern int aenc_exit();\n//jpeg to http\nextern int libyuvdist_startYuvDistService(int port);\nextern int libyuvdist_updateYuv(int iHandle,char* data,int len,int seq,unsigned long timeStamp);\nextern int libyuvdist_stopYuvDistService(int iHandle);\nextern int libyuvdist_setSettingCallback(int iHandle,int func);//int func(int resX,int resY,int fps)\n\n#ifdef __cplusplus \n}\n#endif\n#endif\n\n\n\n\n3.Arduino Libray API\n\n\nThe Arduino library wraps the web api, using serial communication and curl to communicate and send command to the video core(HI3518E). There are also example codes could be find in \ngithub\n\n\n#ifndef _HICAT_H_\n#define _HICAT_H_\n\n#include \nArduino.h\n\n\nclass HiCat\n{\npublic:\n    HiCat();\n    int begin(void);\n\n    /**\n     * Take a picture\n     *\n     * @param file_name     picture name\n     * @return 0 - OK, otherwise - error code\n     */\n    int snapshot(const char *file_name);\n\n    /**\n     * Start to record a video which is saved at /www/mmc/video/\n     *\n     * @return 0 - OK, otherwise - error code\n     */\n    int record();\n\n    /**\n     * Stop to record a video\n     *\n     * @return 0 - OK, otherwise - error code\n     */\n    int stop_recording();\n\n    /**\n     * Set camera format\n     *\n     * @param resolution    0 - 1280*720, 2 - 640*480, 1 - 320*240\n     * @param rotation      0 - no rotation, 1 - 180 degree rotation\n     * @param fps           frame per secord from 1 to 25\n     * @return 0 - OK, otherwise - error code\n     */\n    int set_camera(int resolution, int rotation, int fps);\n\n    /**\n     * Set Wi-Fi mode\n     *\n     * @param mode  0 - AP mode, 1 - Station mode\n     * @param ssid  SSID\n     * @param password  password\n     * @return 0 - OK, otherwise - error code\n     */\n    int set_wifi(int mode, const char *ssid, const char *password);\n\n    /**\n     * Run a shell command\n     *\n     * @param command   shell command\n     * @return 0 - OK, otherwise - error code\n     */\n    int run(const char *command);\n\nprivate:\n    void prepare_web_command();\n    int read_result();\n};\n\nextern HiCat hicat;\n\n\n#endif // _HICAT_H_\n\n\n\n\nHI3518EV100 SDK\n\n\nContent within SDK:\n\n\n\n\nlinux\n\n\nfile system \n\n\nHi3518E Documentation/Hardware design reference\n\n\ndownload address:\n \ndownload link\n  \nverifycode:\n \nkspc\n   \ndecode password:\n \nlk87612umzvcb01qqsalv\n\n\n\n\nopenCV\n\n\nThe way To do \nblack-line tracking.\n\n\n1.check out the files.\n \n\n\n~/libhicat/app$ ls__\n\nbuild.sh capture.cpp hi.html match model2.jpg myImage.jpg capture env.sh hi.jpg match.cpp model.jpg\n\n\n\n\n2.copy capture.cpp as a demo\n\n\ncp capture.cpp lineTrack.cpp\n\n\n\n\n3.modify build.sh, add content below\n\n\narm-hisiv100nptl-linux-g++ lineTrack.cpp ../lib/libhisiv.a -I../include -lpthread -lm -o lineTrack\n\n\n\n\n4.compile\n\n\n./build.sh\n\n\n\n\n#include\nstdio.h\n\n#include\nstdlib.h\n\n#include\nunistd.h\n\n#include\nlibhisiv.h\n\nint main(int argc,char* argv[])\n{\n\nchar data[1280*720];\nint len;\nint i;\nlen = venc_getYUV(0,data);\n\n    int x,y;\n    int result[10];\nfor(i=0;i\n10;i++){\n    result[i] = 0;\n}\nfor(i=0;i\n10;i++){\n    for(y=635;y\n(635+10);y++){\n        for(x=i*72;x\n(i+1)*72;x++){\n            result[i]+=data[y*1280+x];\n        }\n    }\n    result[i] = result[i]/(72*10);\n}\nfor(i=0;i\n10;i++){\n    result[i] = 0;\n    printf(\nresult = %d\\n\n,result[i]);\n}\n}", 
            "title": "Document"
        }, 
        {
            "location": "/#quick-startuser-manual", 
            "text": "What is Livera   Welcome to start the new adventure with Hicat!! Happy hacks. :p  In a nutshell, Livera by Team HiCat is an open source hardware project which aims to bring machine vision features to the  Arduino  community. It is also a good platform for building  visual driven robotics.  We've provided libraries which contain  machine vision  related APIs such as:   720hd video and photo capturing processing  OpenCV enabled Color-Sensitive and Object-Tracking.  Wifi enabled wireless control (this can work with the iot!)   Image capturing and data recording onto the onboard sd card   Mobile observation and manipulation from our custom apps( web-based and native)  Programmable and open source.   what Livera could do:   Future development:  It is always exciting to think about the future, as for the buzz of AI recently, undeniably it is the future.  When we saw the article of How a  Japanese cucumber farmer is using deep learning to sort cucumbers.  we think Livera should be best machine vision front-end part for  image capturing and openCV pre-processing .  With the natural language virtual assistant and cloud deep learning platfrom, we could just teach the robot how to perform task by speaking, or let him learn by watching, that will be really awesome, like people could finally owns their own real world  R2D2  or  BB8 .  In conclusion:   Theme based advance  robotic kit .  More advance image capturing and processing capability  Natural language virtual assitant  Image streaming and processing  cloud     User Manual   Power:  LIVERA allows mulitpul ways of power supply   3.7V lipo battery (No higher voltage)  USB cable (2.0)  I/O port   Hock Up Camera Module:  The Livera core package contains 3 main conponent, 1. Livera Board 2. Camera Module 3. Extendable Cable.  You could choose to directly plug in the Camera Module on to Livera Board, or use extendable cable to extend the Camera Module in order to build Robot.  Connect to Livera:  Power up Livera, give a few second to boot, the WIFI access point hostname  hicat_xxxxxx  should show up on your PC/MOBILE's wifi list. The default wifi password is:  88888888  Once you connected to LIVERA, you could Telnet()  Test Video Feature:  LIVERA has two video streaming mode  RTSP/MJPEG , RTSP stands for advence  H.264 raw video streaming  which works well with our Android app or any video Player which accepted RTSP streaming protocol. MJPEG would be a  WEB friendly  video format.  Once you successfully boot up Livera and accessing into the WIFI, you can connect to the web app we built to test the board function.  Go to web page  192.168.1.1/www/mmc/webapp/index.html  or the simplify version web page  192.168.1.1 .   Once the web page show up, hit the  LiveView  button to get video stream from Livera.   Access into Linux(3518E):  Livera accept  telnet  connections, when you connected to Livera with WIFI, you could open up your terminal, type:  telnet 192.168.1.1       //if you let the board connected to the router you should find the correct IP address\n\n//User:root\n//passward:(hit return directly)\n\ncd /hicat/   //firmware directory\n./launch.sh   //Main script for main operation: video setting/mount sd card\n\ncd /hicat/www/mmc  //SD card directory", 
            "title": "Quick Start/User Manual"
        }, 
        {
            "location": "/#hardware", 
            "text": "", 
            "title": "Hardware"
        }, 
        {
            "location": "/#livera", 
            "text": "", 
            "title": "Livera"
        }, 
        {
            "location": "/#motor-driver", 
            "text": "", 
            "title": "Motor Driver"
        }, 
        {
            "location": "/#the-robot-kit-assembly-guide", 
            "text": "", 
            "title": "The Robot kit Assembly Guide"
        }, 
        {
            "location": "/#software", 
            "text": "", 
            "title": "Software"
        }, 
        {
            "location": "/#firmware", 
            "text": "How to burn the firmware to flash  you must have a hicat board with a uboot already burned.  then connect the UART0 on the ARM9 Hisiv chip. and then use the command as below[recomendly using Hyper Terminal to finish this]:  loady 0x82000000  then send file on Hyper Terminal with xmodern protocal. choose the uImage file under https://github.com/9crk/libhisiv/opt/  sf probe 0\nsf erase 0x100000 0x300000\nsf write 0x82000000 0x100000 0x300000    \nloady 0x82000000  then send the rootfs file to the board.  sf erase 0x400000 0xC00000\nsf write 0x82000000 0x400000 0x500000\nsetenv bootargs 'mem=32M console=ttyAMA0,115200 root=/dev/mtdblock2 rootfstype=jffs2 mtdparts=hi_sfc:1M(boot),3M(kernel),12M(rootfs)'\nsetenv bootcmd 'sf probe 0;sf read 0x82000000 0x100000 0x300000;bootm 0x82000000'\nsaveenv  then reboot the board or execute 'reset' command.  How to use opencv Demo \n1. clone this repo\n2. then install the compiler\n3. compile the apps under 'app' dir with  ./build.sh \n4. copy the app dir to the board\n5. copy the opt/opencvlib dir to the board at /www/mmc/opencv/opencvlib\n6.  cd app   source env.sh \n7.  execute './capture'  to capture an image named 'myImage.jpg'\n8.  execute './match model.jpg'  to find the object model.jpg in the camera.\n9. then you can browser the result hi.jpg on http://192.168.1.1/mmc/opencv/app/hi.jpg  About rtspserver and libhisiv.a  rtspserver have two demo:  one is modified from live555 project. ( live555MediaServer )\n * source code is in https://bitbucket.org/zhouhua/hicat_rtspserver\n * play Address: rtsp://192.168.1.1/hicat.264  one is a http-rtp based program. with only binary file provided. ( http-rtpServer )\n * play Address: http://192.168.1.1/cgi-bin/video.sdp but must with zwebs running first.  you can rename any of it as 'rtspserver',then it will be run in the next boot. or run /hicat/launch.sh restart to restart all services.\nlibhisiv.a contains all the camera function.as below:  extern int venc_exit(int n);//0 \nextern int venc_init(int resolve);//0:720P 1:QVGA 2:VGA\nextern int venc_requestIDR();\nextern int venc_getFrame(char* buffer,int *datalen);//get h264 frame data.\nextern int venc_rotate(int dir);//0:no rotate 2:180 digree rotate.\nextern int venc_getYUV(int mode,char*buff);//get YUV data.  How to install software pack   execute 'lrz' command to send libhicat/opt/hi_sd.sh into the board (any where)  format the sd card with fat32 format in default param. or use mkfs.vfat on Linux OS  then execute  chmod +x hi_sd.sh   ./hi_sd.sh , the board will reboot   How to upgrade \n1. Formating the SD card with vfat or fat32 mode.\n2. then copy the hicat2016xxxx.tar package to the SD card.\n3. press the reset button (RST_PBC)\n4. connect the power supply.\n5. wait for the board reset again.  What's more \n  zwebs  https://9crk@bitbucket.org/zhouhua/hicat_zwebs.git  How to use programming with serial port on Hisiv \n  libSerial  https://github.com/9crk/libSerial.git  Source Code  can be view  here", 
            "title": "Firmware"
        }, 
        {
            "location": "/#android", 
            "text": "", 
            "title": "Android"
        }, 
        {
            "location": "/#web-app", 
            "text": "The web app provides functions like Video recording, Live streaming,   What an amazing feature about livera is it could  serve web pages  as web app thanks to the file streaming server, in Livera's demo, we've provided a single page web app which based on VUE.js, the app would work as Livera's command panel.  The server also provide  REST API  which allows you to communicate with Livera through AJAX", 
            "title": "Web app"
        }, 
        {
            "location": "/#example-code", 
            "text": "", 
            "title": "Example Code"
        }, 
        {
            "location": "/#image-capturing", 
            "text": "1. Image capture within Arduino  \n    #include \"hicat.h\"\n\n    void setup()\n    {\n        hicat.begin();\n\n        char name[16] = \"0.jpg\";\n        for (int i = 0; i  <  8; i++)\n        {\n            name[0] = '0' + i;\n            hicat.snapshot(name);\n\n            delay(10);\n        }\n    }\n\n    void loop()\n    {\n    }", 
            "title": "Image Capturing"
        }, 
        {
            "location": "/#robot-kit", 
            "text": "// hicat robot demo\n    // get SerialCommand library from https://github.com/hicat-tech/Arduino-SerialCommand\n\n    #include  \n    #include  \n\n    int PWM1 = 9;     // control servo\n    int PWM_CE = 11;  // servo enable\n\n    int AIN1 = 4;  // control motor1\n    int AIN2 = 5;  // control motor1\n    int AIN3 = 6;  // control motor2\n    int AIN4 = 7;  // control motor2\n\n    int BIN3 = A2;  //control laser\n    int BIN4 = A3;  //control laser\n\n    Servo myservo;\n    SerialCommand sCmd;\n\n    uint8_t camera_angle = 120;\n    uint8_t camera_angle_range[] = {\n      60, 150\n    };\n    uint8_t laser_is_on = 0;\n\n    void setup() {\n      Serial.begin(115200);\n      Serial1.begin(115200);\n\n    //  while (!Serial);\n      Serial.println(\"----- Car ----\");\n\n      // initialize the digital pin as an output.\n      pinMode(AIN1, OUTPUT);\n      pinMode(AIN2, OUTPUT);\n      pinMode(AIN3, OUTPUT);\n      pinMode(AIN4, OUTPUT);\n      pinMode(BIN3, OUTPUT);\n      pinMode(BIN4, OUTPUT);\n      digitalWrite(BIN3, LOW);  // turn off LASER\n      digitalWrite(BIN4, LOW);\n\n      pinMode(PWM_CE, OUTPUT);\n      myservo.attach(PWM1);\n      digitalWrite(PWM_CE, HIGH);\n      myservo.write(camera_angle);\n      digitalWrite(PWM_CE, LOW); //disable servo\n\n\n      // Setup callbacks for SerialCommand commands\n      sCmd.addCommand(\"laser\", trigger_laser);\n      sCmd.addCommand(\"camera\", adjust_camera);\n      sCmd.addCommand(\"motor\", set_motor);\n      sCmd.setDefaultHandler(unrecognized);\n    }\n\n    // the loop routine runs over and over again forever:\n    void loop() {\n      sCmd.readSerial((Stream & )Serial1);\n    }\n\n    void trigger_laser()\n    {\n      if (laser_is_on) {\n        digitalWrite(BIN3, LOW);  // turn off LASER\n        laser_is_on = 0;\n        Serial.println(\"laser off\");\n      }\n      else {\n        digitalWrite(BIN3, HIGH);  // turn on LASER\n        laser_is_on = 1;\n        Serial.println(\"laser on\");\n      }\n    }\n\n    void adjust_camera()\n    {\n      char *param;\n\n      param = sCmd.next();\n      if (!strcmp(param, \"down\")) {\n        if (camera_angle  <  camera_angle_range[1]) {\n          camera_angle += 10;\n\n          digitalWrite(PWM_CE, HIGH);\n          myservo.write(camera_angle);\n          digitalWrite(PWM_CE, HIGH);\n        }\n      }\n      else if (!strcmp(param, \"up\")) {\n        if (camera_angle > camera_angle_range[0]) {\n          camera_angle -= 10;\n\n          digitalWrite(PWM_CE, HIGH);\n          myservo.write(camera_angle);\n          digitalWrite(PWM_CE, HIGH);\n        }\n      }\n\n      Serial.print(\"camera angle: \");\n      Serial.println(camera_angle);\n    }\n\n    void set_motor()\n    {\n      char *param;\n      int16_t left = 0;\n      int16_t right = 0;\n\n      param = sCmd.next();\n      if (param == NULL) {\n        return;\n      }\n      left = atoi(param);\n\n      param = sCmd.next();\n      if (param == NULL) {\n        return;\n      }\n      right = atoi(param);\n\n      Serial.print(\"motor \");\n      Serial.print(left);\n      Serial.print(\" \");\n      Serial.println(right);\n\n\n      if (left > 30) {\n        analogWrite(AIN2, left);\n        digitalWrite(AIN1, LOW);\n      } else if (left  <  -30)  {\n        analogWrite(AIN2, 255 + left);\n        digitalWrite(AIN1, HIGH);\n      }\n      else {\n        digitalWrite(AIN1, LOW);\n        digitalWrite(AIN2, LOW);\n      }\n\n      if (right > 30) {\n        analogWrite(AIN3, right);\n        digitalWrite(AIN4, LOW);\n      }\n      else if (right  <  -30) {\n        analogWrite(AIN3, 255 + right);\n        digitalWrite(AIN4, HIGH);\n      }\n      else {\n        digitalWrite(AIN3, LOW);\n        digitalWrite(AIN4, LOW);\n      }\n\n    }\n\n\n    // This gets set as the default handler, and gets called when no other command matches.\n    void unrecognized(const char *command) {\n      Serial.println('?');\n    }", 
            "title": "Robot Kit"
        }, 
        {
            "location": "/#advance", 
            "text": "", 
            "title": "Advance"
        }, 
        {
            "location": "/#api-guide", 
            "text": "1.WEB API  The Web API contains a set of REST API in order to interact with LIVERA in a convenient way through  AJAX  or  URL .   AJAX Example:  \n\n    var xhr = new XMLHttpRequest(){\n          xhr.open('GET', '/hicat/videoServer?mode=0', true)\n          xhr.onload = function() {\n            answer = JSON.parse(xhr.responseText)\n            console.log(answer1)            }\n         }\n        xhr.send()\n    }  1. Set up Video Streaming Mode:  This API allows you to swith between  RTSP  and  MJPEG  streaming mode, be careful that  Video Record API  only works under  RTSP Mode , and  Screen Shot API  only works under  MJEPG Mode .  /hicat/videoServer?mode=0  mode=0 : RTSP Server Start mode=1 : MJPEG Mode  2. Station Mode : Let Livera link to local wifi router  /hicat/stationMode?ssid=xxxxx password=xxxxxxx  return messages: success : none return error :{\"result\":\"ERROR\"}  3. WIFI Access Point : Make Livera to AP mode  /hicat/apMode?ssid=xxxxx password=xxxxxxx  return messages(object): success : none return error \uff1a{\"result\":\"ERROR\"}  4. Set Livera time : Synchronous time with Livera, the time also affect to the default video name.   /hicat/setTime?time=%d-%d-%d-%d-%d-%d  Example : /hicat/setTime?time=2018-09-09-01-01-01 success \uff1a{\"result\":\"OK\"}    error \uff1a{\"result\":\"ERROR\"}  5. Get Video Download Links : This API will return a JASON format( {\"result\":\"OK\",\"files\":[\"name\":\"xxxxx\",\"name\":\"xxxxx\"]} ) message about all the file within  video folder  in SD Card. Once you get the fileName you could just go to this url  http://192.168.1.1/mmc/video/xxxxx.264  to download it(might figure your IP address under station mode).  /hicat/files  success :{\"result\":\"OK\",\"files\":[\"name\":\"xxxxx\",\"name\":\"xxxxx\"]}    error :{\"result\":\"ERROR\"}  6. Video Record : This API allows you to record and delete the video and auto save into the default  video  folder in SD card.  /hicat/record?save=1\n/hicat/record?del=xxxxxxxx.h264  save=1 : start recording save=0 : stop recording and save del=xxxxxxxx.h264 : delete xxxxxxxx.h264 success \uff1a{\"result\":\"OK\"}    error \uff1a{\"result\":\"ERROR\"}  7. Video Setting : Switch video angle, video resolution and video fps.  /hicat/setCamera?resolve=1 rotate=0 fps=20  success \uff1a{\"result\":\"OK\"}    error \uff1a{\"result\":\"ERROR\"}  //only work under mjpg mode  8. Snapshot : snap shot form one of the frame form MJPEG stream. We suggest to make the direction to /www/mmc/video/ coz the photo info could be receive under  /hicat/files  API.  /hicat/snapshot?name=xxx.jpg dir=/www/mmc/video/  success \uff1a{\"result\":\"OK\"}      9. For test : test api, do nothing but test.  /hicat/test  success \uff1a{\"result\":\"OK\"}     2.Embedded Linux API  Detail information could be view under our github  libhicat , There are instructions guide you through development tools set up and workflow, please have a look.  #ifndef _LIBHISIV_H_\n#define _LIBHISIV_H_\n\n#ifdef __cplusplus \nextern  C  { \n#endif\nint venc_exit(int n);\nint venc_init(int resolve);//0:720P 1:QVGA(320*240) 2:VGA(640*480)\nint venc_init_more(int resolve,int mode,int fps);//resolve: 0/1/2  1280*720/320*240/640*480  mode: 0/1 H264/MJPEG\nint venc_requestIDR();//request IDR frame\nint venc_getFrame(char* buffer,int *datalen,int *pts,int *type);\nint venc_snap(char* buff,int xRes,int yRes);\nint venc_getYUV(int mode,char*buff);//mode=0 Y  mode=1 UV mode = 3 YUV420(SP)\nint venc_rotate(int dir);\n\n//for audio\nextern int aenc_init(int mode);// 0/1 PT_LPCM/AAC/\nextern int aenc_getFrame(char* buff);\nextern int aenc_exit();\n//jpeg to http\nextern int libyuvdist_startYuvDistService(int port);\nextern int libyuvdist_updateYuv(int iHandle,char* data,int len,int seq,unsigned long timeStamp);\nextern int libyuvdist_stopYuvDistService(int iHandle);\nextern int libyuvdist_setSettingCallback(int iHandle,int func);//int func(int resX,int resY,int fps)\n\n#ifdef __cplusplus \n}\n#endif\n#endif  3.Arduino Libray API  The Arduino library wraps the web api, using serial communication and curl to communicate and send command to the video core(HI3518E). There are also example codes could be find in  github  #ifndef _HICAT_H_\n#define _HICAT_H_\n\n#include  Arduino.h \n\nclass HiCat\n{\npublic:\n    HiCat();\n    int begin(void);\n\n    /**\n     * Take a picture\n     *\n     * @param file_name     picture name\n     * @return 0 - OK, otherwise - error code\n     */\n    int snapshot(const char *file_name);\n\n    /**\n     * Start to record a video which is saved at /www/mmc/video/\n     *\n     * @return 0 - OK, otherwise - error code\n     */\n    int record();\n\n    /**\n     * Stop to record a video\n     *\n     * @return 0 - OK, otherwise - error code\n     */\n    int stop_recording();\n\n    /**\n     * Set camera format\n     *\n     * @param resolution    0 - 1280*720, 2 - 640*480, 1 - 320*240\n     * @param rotation      0 - no rotation, 1 - 180 degree rotation\n     * @param fps           frame per secord from 1 to 25\n     * @return 0 - OK, otherwise - error code\n     */\n    int set_camera(int resolution, int rotation, int fps);\n\n    /**\n     * Set Wi-Fi mode\n     *\n     * @param mode  0 - AP mode, 1 - Station mode\n     * @param ssid  SSID\n     * @param password  password\n     * @return 0 - OK, otherwise - error code\n     */\n    int set_wifi(int mode, const char *ssid, const char *password);\n\n    /**\n     * Run a shell command\n     *\n     * @param command   shell command\n     * @return 0 - OK, otherwise - error code\n     */\n    int run(const char *command);\n\nprivate:\n    void prepare_web_command();\n    int read_result();\n};\n\nextern HiCat hicat;\n\n\n#endif // _HICAT_H_", 
            "title": "API GUIDE"
        }, 
        {
            "location": "/#hi3518ev100-sdk", 
            "text": "Content within SDK:   linux  file system   Hi3518E Documentation/Hardware design reference  download address:   download link    verifycode:   kspc     decode password:   lk87612umzvcb01qqsalv", 
            "title": "HI3518EV100 SDK"
        }, 
        {
            "location": "/#opencv", 
            "text": "The way To do  black-line tracking.  1.check out the files.    ~/libhicat/app$ ls__\n\nbuild.sh capture.cpp hi.html match model2.jpg myImage.jpg capture env.sh hi.jpg match.cpp model.jpg  2.copy capture.cpp as a demo  cp capture.cpp lineTrack.cpp  3.modify build.sh, add content below  arm-hisiv100nptl-linux-g++ lineTrack.cpp ../lib/libhisiv.a -I../include -lpthread -lm -o lineTrack  4.compile  ./build.sh  #include stdio.h \n#include stdlib.h \n#include unistd.h \n#include libhisiv.h \nint main(int argc,char* argv[])\n{\n\nchar data[1280*720];\nint len;\nint i;\nlen = venc_getYUV(0,data);\n\n    int x,y;\n    int result[10];\nfor(i=0;i 10;i++){\n    result[i] = 0;\n}\nfor(i=0;i 10;i++){\n    for(y=635;y (635+10);y++){\n        for(x=i*72;x (i+1)*72;x++){\n            result[i]+=data[y*1280+x];\n        }\n    }\n    result[i] = result[i]/(72*10);\n}\nfor(i=0;i 10;i++){\n    result[i] = 0;\n    printf( result = %d\\n ,result[i]);\n}\n}", 
            "title": "openCV"
        }, 
        {
            "location": "/api/", 
            "text": "API GUIDE\n\n\n1.WEB API\n\n\nThe Web API contains a set of REST API in order to interact with LIVERA in a convenient way through \nAJAX\n or \nURL\n. \n\n\nAJAX Example:\n\n\n\n\n    var xhr = new XMLHttpRequest(){\n          xhr.open('GET', '/hicat/videoServer?mode=0', true)\n          xhr.onload = function() {\n            answer = JSON.parse(xhr.responseText)\n            console.log(answer1)            }\n         }\n        xhr.send()\n    }\n\n\n\n\n\n1.\nSet up Video Streaming Mode:\n This API allows you to swith between \nRTSP\n and \nMJPEG\n streaming mode, be careful that \nVideo Record API\n only works under \nRTSP Mode\n, and \nScreen Shot API\n only works under \nMJEPG Mode\n.\n\n\n/hicat/videoServer?mode=0\n\n\n\n\nmode=0\n: RTSP Server Start\n\nmode=1\n: MJPEG Mode\n\n\n2.\nStation Mode\n: Let Livera link to local wifi router\n\n\n/hicat/stationMode?ssid=xxxxx\npassword=xxxxxxx\n\n\n\n\nreturn messages:\n\nsuccess\n: none return\n\nerror\n:{\"result\":\"ERROR\"}\n\n\n3.\nWIFI Access Point\n: Make Livera to AP mode\n\n\n/hicat/apMode?ssid=xxxxx\npassword=xxxxxxx\n\n\n\n\nreturn messages(object):\n\nsuccess\n: none return\n\nerror\n\uff1a{\"result\":\"ERROR\"}\n\n\n4.\nSet Livera time\n: Synchronous time with Livera, the time also affect to the default video name. \n\n\n/hicat/setTime?time=%d-%d-%d-%d-%d-%d\n\n\n\n\nExample\n: /hicat/setTime?time=2018-09-09-01-01-01\n\nsuccess\n\uff1a{\"result\":\"OK\"}  \n\n\nerror\n\uff1a{\"result\":\"ERROR\"}\n\n\n5.\nGet Video Download Links\n: This API will return a JASON format(\n{\"result\":\"OK\",\"files\":[\"name\":\"xxxxx\",\"name\":\"xxxxx\"]}\n) message about all the file within \nvideo folder\n in SD Card. Once you get the fileName you could just go to this url \nhttp://192.168.1.1/mmc/video/xxxxx.264\n to download it(might figure your IP address under station mode).\n\n\n/hicat/files\n\n\n\n\nsuccess\n:{\"result\":\"OK\",\"files\":[\"name\":\"xxxxx\",\"name\":\"xxxxx\"]}  \n\n\nerror\n:{\"result\":\"ERROR\"}\n\n\n6.\nVideo Record\n: This API allows you to record and delete the video and auto save into the default \nvideo\n folder in SD card.\n\n\n/hicat/record?save=1\n/hicat/record?del=xxxxxxxx.h264\n\n\n\n\nsave=1\n: start recording\n\nsave=0\n: stop recording and save\n\ndel=xxxxxxxx.h264\n: delete xxxxxxxx.h264\n\nsuccess\n\uff1a{\"result\":\"OK\"}  \n\n\nerror\n\uff1a{\"result\":\"ERROR\"}\n\n\n7.\nVideo Setting\n: Switch video angle, video resolution and video fps.\n\n\n/hicat/setCamera?resolve=1\nrotate=0\nfps=20\n\n\n\n\nsuccess\n\uff1a{\"result\":\"OK\"}  \n\n\nerror\n\uff1a{\"result\":\"ERROR\"}\n\n\n//only work under mjpg mode\n\n\n8.\nSnapshot\n: snap shot form one of the frame form MJPEG stream. We suggest to make the direction to /www/mmc/video/ coz the photo info could be receive under \n/hicat/files\n API.\n\n\n/hicat/snapshot?name=xxx.jpg\ndir=/www/mmc/video/\n\n\n\n\nsuccess\n\uff1a{\"result\":\"OK\"}    \n\n\n9.\nFor test\n: test api, do nothing but test.\n\n\n/hicat/test\n\n\n\n\nsuccess\n\uff1a{\"result\":\"OK\"}   \n\n\n2.Embedded Linux API\n\n\nDetail information could be view under our github \nlibhicat\n, There are instructions guide you through development tools set up and workflow, please have a look.\n\n\n#ifndef _LIBHISIV_H_\n#define _LIBHISIV_H_\n\n#ifdef __cplusplus \nextern \nC\n { \n#endif\nint venc_exit(int n);\nint venc_init(int resolve);//0:720P 1:QVGA(320*240) 2:VGA(640*480)\nint venc_init_more(int resolve,int mode,int fps);//resolve: 0/1/2  1280*720/320*240/640*480  mode: 0/1 H264/MJPEG\nint venc_requestIDR();//request IDR frame\nint venc_getFrame(char* buffer,int *datalen,int *pts,int *type);\nint venc_snap(char* buff,int xRes,int yRes);\nint venc_getYUV(int mode,char*buff);//mode=0 Y  mode=1 UV mode = 3 YUV420(SP)\nint venc_rotate(int dir);\n\n//for audio\nextern int aenc_init(int mode);// 0/1 PT_LPCM/AAC/\nextern int aenc_getFrame(char* buff);\nextern int aenc_exit();\n//jpeg to http\nextern int libyuvdist_startYuvDistService(int port);\nextern int libyuvdist_updateYuv(int iHandle,char* data,int len,int seq,unsigned long timeStamp);\nextern int libyuvdist_stopYuvDistService(int iHandle);\nextern int libyuvdist_setSettingCallback(int iHandle,int func);//int func(int resX,int resY,int fps)\n\n#ifdef __cplusplus \n}\n#endif\n#endif\n\n\n\n\n3.Arduino Libray API\n\n\nThe Arduino library wraps the web api, using serial communication and curl to communicate and send command to the video core(HI3518E). There are also example codes could be find in \ngithub\n\n\n\n\n#ifndef _HICAT_H_\n#define _HICAT_H_\n\n#include \nArduino.h\n\n\nclass HiCat\n{\npublic:\n    HiCat();\n    int begin(void);\n\n    /**\n     * Take a picture\n     *\n     * @param file_name     picture name\n     * @return 0 - OK, otherwise - error code\n     */\n    int snapshot(const char *file_name);\n\n    /**\n     * Start to record a video which is saved at /www/mmc/video/\n     *\n     * @return 0 - OK, otherwise - error code\n     */\n    int record();\n\n    /**\n     * Stop to record a video\n     *\n     * @return 0 - OK, otherwise - error code\n     */\n    int stop_recording();\n\n    /**\n     * Set camera format\n     *\n     * @param resolution    0 - 1280*720, 2 - 640*480, 1 - 320*240\n     * @param rotation      0 - no rotation, 1 - 180 degree rotation\n     * @param fps           frame per secord from 1 to 25\n     * @return 0 - OK, otherwise - error code\n     */\n    int set_camera(int resolution, int rotation, int fps);\n\n    /**\n     * Set Wi-Fi mode\n     *\n     * @param mode  0 - AP mode, 1 - Station mode\n     * @param ssid  SSID\n     * @param password  password\n     * @return 0 - OK, otherwise - error code\n     */\n    int set_wifi(int mode, const char *ssid, const char *password);\n\n    /**\n     * Run a shell command\n     *\n     * @param command   shell command\n     * @return 0 - OK, otherwise - error code\n     */\n    int run(const char *command);\n\nprivate:\n    void prepare_web_command();\n    int read_result();\n};\n\nextern HiCat hicat;\n\n\n#endif // _HICAT_H_", 
            "title": "API Guide"
        }, 
        {
            "location": "/api/#api-guide", 
            "text": "", 
            "title": "API GUIDE"
        }, 
        {
            "location": "/api/#1web-api", 
            "text": "The Web API contains a set of REST API in order to interact with LIVERA in a convenient way through  AJAX  or  URL .   AJAX Example:  \n\n    var xhr = new XMLHttpRequest(){\n          xhr.open('GET', '/hicat/videoServer?mode=0', true)\n          xhr.onload = function() {\n            answer = JSON.parse(xhr.responseText)\n            console.log(answer1)            }\n         }\n        xhr.send()\n    }  1. Set up Video Streaming Mode:  This API allows you to swith between  RTSP  and  MJPEG  streaming mode, be careful that  Video Record API  only works under  RTSP Mode , and  Screen Shot API  only works under  MJEPG Mode .  /hicat/videoServer?mode=0  mode=0 : RTSP Server Start mode=1 : MJPEG Mode  2. Station Mode : Let Livera link to local wifi router  /hicat/stationMode?ssid=xxxxx password=xxxxxxx  return messages: success : none return error :{\"result\":\"ERROR\"}  3. WIFI Access Point : Make Livera to AP mode  /hicat/apMode?ssid=xxxxx password=xxxxxxx  return messages(object): success : none return error \uff1a{\"result\":\"ERROR\"}  4. Set Livera time : Synchronous time with Livera, the time also affect to the default video name.   /hicat/setTime?time=%d-%d-%d-%d-%d-%d  Example : /hicat/setTime?time=2018-09-09-01-01-01 success \uff1a{\"result\":\"OK\"}    error \uff1a{\"result\":\"ERROR\"}  5. Get Video Download Links : This API will return a JASON format( {\"result\":\"OK\",\"files\":[\"name\":\"xxxxx\",\"name\":\"xxxxx\"]} ) message about all the file within  video folder  in SD Card. Once you get the fileName you could just go to this url  http://192.168.1.1/mmc/video/xxxxx.264  to download it(might figure your IP address under station mode).  /hicat/files  success :{\"result\":\"OK\",\"files\":[\"name\":\"xxxxx\",\"name\":\"xxxxx\"]}    error :{\"result\":\"ERROR\"}  6. Video Record : This API allows you to record and delete the video and auto save into the default  video  folder in SD card.  /hicat/record?save=1\n/hicat/record?del=xxxxxxxx.h264  save=1 : start recording save=0 : stop recording and save del=xxxxxxxx.h264 : delete xxxxxxxx.h264 success \uff1a{\"result\":\"OK\"}    error \uff1a{\"result\":\"ERROR\"}  7. Video Setting : Switch video angle, video resolution and video fps.  /hicat/setCamera?resolve=1 rotate=0 fps=20  success \uff1a{\"result\":\"OK\"}    error \uff1a{\"result\":\"ERROR\"}  //only work under mjpg mode  8. Snapshot : snap shot form one of the frame form MJPEG stream. We suggest to make the direction to /www/mmc/video/ coz the photo info could be receive under  /hicat/files  API.  /hicat/snapshot?name=xxx.jpg dir=/www/mmc/video/  success \uff1a{\"result\":\"OK\"}      9. For test : test api, do nothing but test.  /hicat/test  success \uff1a{\"result\":\"OK\"}", 
            "title": "1.WEB API"
        }, 
        {
            "location": "/api/#2embedded-linux-api", 
            "text": "Detail information could be view under our github  libhicat , There are instructions guide you through development tools set up and workflow, please have a look.  #ifndef _LIBHISIV_H_\n#define _LIBHISIV_H_\n\n#ifdef __cplusplus \nextern  C  { \n#endif\nint venc_exit(int n);\nint venc_init(int resolve);//0:720P 1:QVGA(320*240) 2:VGA(640*480)\nint venc_init_more(int resolve,int mode,int fps);//resolve: 0/1/2  1280*720/320*240/640*480  mode: 0/1 H264/MJPEG\nint venc_requestIDR();//request IDR frame\nint venc_getFrame(char* buffer,int *datalen,int *pts,int *type);\nint venc_snap(char* buff,int xRes,int yRes);\nint venc_getYUV(int mode,char*buff);//mode=0 Y  mode=1 UV mode = 3 YUV420(SP)\nint venc_rotate(int dir);\n\n//for audio\nextern int aenc_init(int mode);// 0/1 PT_LPCM/AAC/\nextern int aenc_getFrame(char* buff);\nextern int aenc_exit();\n//jpeg to http\nextern int libyuvdist_startYuvDistService(int port);\nextern int libyuvdist_updateYuv(int iHandle,char* data,int len,int seq,unsigned long timeStamp);\nextern int libyuvdist_stopYuvDistService(int iHandle);\nextern int libyuvdist_setSettingCallback(int iHandle,int func);//int func(int resX,int resY,int fps)\n\n#ifdef __cplusplus \n}\n#endif\n#endif", 
            "title": "2.Embedded Linux API"
        }, 
        {
            "location": "/api/#3arduino-libray-api", 
            "text": "The Arduino library wraps the web api, using serial communication and curl to communicate and send command to the video core(HI3518E). There are also example codes could be find in  github  \n\n#ifndef _HICAT_H_\n#define _HICAT_H_\n\n#include  Arduino.h \n\nclass HiCat\n{\npublic:\n    HiCat();\n    int begin(void);\n\n    /**\n     * Take a picture\n     *\n     * @param file_name     picture name\n     * @return 0 - OK, otherwise - error code\n     */\n    int snapshot(const char *file_name);\n\n    /**\n     * Start to record a video which is saved at /www/mmc/video/\n     *\n     * @return 0 - OK, otherwise - error code\n     */\n    int record();\n\n    /**\n     * Stop to record a video\n     *\n     * @return 0 - OK, otherwise - error code\n     */\n    int stop_recording();\n\n    /**\n     * Set camera format\n     *\n     * @param resolution    0 - 1280*720, 2 - 640*480, 1 - 320*240\n     * @param rotation      0 - no rotation, 1 - 180 degree rotation\n     * @param fps           frame per secord from 1 to 25\n     * @return 0 - OK, otherwise - error code\n     */\n    int set_camera(int resolution, int rotation, int fps);\n\n    /**\n     * Set Wi-Fi mode\n     *\n     * @param mode  0 - AP mode, 1 - Station mode\n     * @param ssid  SSID\n     * @param password  password\n     * @return 0 - OK, otherwise - error code\n     */\n    int set_wifi(int mode, const char *ssid, const char *password);\n\n    /**\n     * Run a shell command\n     *\n     * @param command   shell command\n     * @return 0 - OK, otherwise - error code\n     */\n    int run(const char *command);\n\nprivate:\n    void prepare_web_command();\n    int read_result();\n};\n\nextern HiCat hicat;\n\n\n#endif // _HICAT_H_", 
            "title": "3.Arduino Libray API"
        }
    ]
}